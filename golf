#include <iostream>
#include <fstream>
#include <sstream>
#include <map>
#include <set>
#include <vector>
#include <algorithm>
#include <limits>
using namespace std;
/* Golf
 *
 * Desc:
 *   This program reads input data concerning golf statistics from
 * an input file, the lines of which are of the form:
 * location;club_name;player_name;score.
 * The program checks if each line consists of the abovementioned four
 * data fields.
 *   The data written in the file is collected into an appropriate data
 * structure consisting of STL containers and structs. After that the user
 * can make searches for the data structure by using the commands
 * places, clubs, rounds, played, and compare. These commands
 * have a varying number of parameters, and the program checks if the
 * user gave a correct number of parameters and if the given parameters
 * (place, club, player) can be found from the data structure.
 *   The program terminates with the command quit.
 *
 * Program author ( Fill with your own info )
 * Name: Minh Hoang Pham
 * Student number: 153015829
 * UserID: ksp966 ( Necessary due to gitlab folder naming )
 * E-Mail: minh.phm@tuni.fi
 *
 * Name: Tu Hoang Hai Nam
 * Student number: 153076622
 * UserID: bbh373 ( Necessary due to gitlab folder naming )
 * E-Mail: nam.tu@tuni.fi
 * Notes about the program and it's implementation (if any):
 *
 * */

//struct to contain player's name, score, club name, and city they played for a SINGLE ROUND
struct Round {
    string name;  // Player's name
    int score;    // Score
    string club;  // Club name
    string location; // City that they played
};

// Trim from both sides of string
string trim(const string& str) {
    size_t first = str.find_first_not_of(" \t\r\n");
    if (first == string::npos){
        return ""; // Empty or all spaces
    }
    size_t last = str.find_last_not_of(" \t\r\n");
    return str.substr(first, (last - first + 1));
}

// Processing file function
bool processFile(const string& filename, map<string, vector<Round>>& data, map<string, set<string>>& clubs) {
    ifstream file(filename);
    if (!file) {
        cerr << "Error: The specified file cannot be opened!" << endl;
        return false;
    }

    string line;
    while (getline(file, line)) {
        if (line.empty()) continue; // Skip empty lines

        // Count the number of semicolons
        int semicolon_count = count(line.begin(), line.end(), ';');

        // If not exactly 3 semicolons, it's an erroneous line
        if (semicolon_count != 3) {
            cerr << "Error: The specified file has an erroneous line!" << endl;
            return false;
        }

        stringstream ss(line);
        string location, golfClub, player, scoreStr;

        // Extract fields
        getline(ss, location, ';');
        getline(ss, golfClub, ';');
        getline(ss, player, ';');
        getline(ss, scoreStr, ';');  // Last field should not have a semicolon after

        // Trim whitespace
        location = trim(location);
        golfClub = trim(golfClub);
        player = trim(player);
        scoreStr = trim(scoreStr);

        // Check for empty values after ensuring exactly 3 semicolons
        if (location.empty() || golfClub.empty() || player.empty() || scoreStr.empty()) {
            cerr << "Error: A line has an empty value!" << endl;
            return false;
        }

        // Assume score is a valid integer per problem statement
        int score = stoi(scoreStr);

        // Store data
        data[player].push_back({player, score, golfClub,location});
        clubs[location].insert(golfClub);
    }

    file.close();
    return true;
}




//HCP calculator
double calculateHCP(const vector<Round>& rounds) {
    if (rounds.size() < 3) return 55.0;
    vector<int> scores;
    for (const auto& round : rounds) scores.push_back(round.score);
    sort(scores.begin(), scores.end());
    int count = min((int)scores.size(), 5);
    double sum = 0;
    for (int i = 0; i < count; i++) sum += scores[i];
    return sum / count;
}


//Compares the HCP of the two players given and prints the results of the comparison.
void comparePlayers(const map<string, vector<Round>>& data, const string& input) {
    stringstream ss(input);
    vector<string> players;
    string name;

    // Extract player names, handling quotes
    while (ss >> name) {
        if (name.front() == '"') {  // Handle quoted names
            string extra;
            while (name.back() != '"' && ss >> extra) {
                name += " " + extra;
            }
            name = name.substr(1, name.size() - 2); // Remove surrounding quotes
        }
        players.push_back(name);
    }

    if (players.size() != 2) {
        cout << "Error: Please provide exactly two player names." << endl;
        return;
    }

    string player1 = players[0], player2 = players[1];

    // Retrieve rounds for each player, handle unknown players
    vector<Round> rounds1 = (data.count(player1) ? data.at(player1) : vector<Round>());
    vector<Round> rounds2 = (data.count(player2) ? data.at(player2) : vector<Round>());

    // Print information for each player
    if (rounds1.empty()) {
        cout << player1 << " has played no rounds of golf" << endl;
    } else {
        double hcp1 = calculateHCP(rounds1);
        cout << player1 << " has played " << rounds1.size() << " rounds of golf";
        if (hcp1 == 55.0) cout << ", but hasn't played enough for a handicap";
        else cout << ", with HCP of " << hcp1;
        cout << endl;
    }
    if (rounds2.empty()) {
        cout << player2 << " has played no rounds of golf" << endl;
    } else {
        double hcp2 = calculateHCP(rounds2);
        cout << player2 << " has played " << rounds2.size() << " rounds of golf";
        if (hcp2 == 55.0) cout << ", but hasn't played enough for a handicap";
        else cout << ", with HCP of " << hcp2;
        cout << endl;
    }

    // Handle all cases where players have insufficient rounds
    bool player1Valid = (!rounds1.empty() && rounds1.size() >= 3);
    bool player2Valid = (!rounds2.empty() && rounds2.size() >= 3);

    // Case 1: Both players are invalid (either no rounds or <3 rounds)
      if (!player1Valid && !player2Valid) {
          cout << "Either hasn't played enough golf" << endl;
          return;
      }

      // Case 2: Exactly one player is valid
      if (player1Valid != player2Valid) {
          if (player1Valid) {
              cout << player1 << " has played better golf" << endl;
          } else {
              cout << player2 << " has played better golf" << endl;
          }
          return;
      }

      // Case 3: Both players are valid - compare HCPs
      double hcp1 = calculateHCP(rounds1);
      double hcp2 = calculateHCP(rounds2);

      if (hcp1 < hcp2) {
          cout << player1 << " has played better golf" << endl;
      } else if (hcp1 > hcp2) {
          cout << player2 << " has played better golf" << endl;
      } else {
          cout << "Both have played as good golf" << endl;
      }
  }

//Print function for a "Played [player]" command, uses HCP function to calculate HCP and print the according strings
void displayPlayed(const map<string, vector<Round>>& data, const string& player) {
    auto it = data.find(player);
    if (it == data.end()) {
        cout << "Error: The player hasn't played any rounds!" << endl;
        return;
    }
    double hcp = calculateHCP(it->second);
       if (hcp == 55.0){
           cout << player <<" has too few rounds for a handicap:"<<endl;
        }
        else{
           cout<< player << " has a HCP of "<<hcp<<" with following results:"<<endl;
       }

    // Get a copy of rounds for sorting
    vector<Round> sortedRounds = it->second;

    // Sort first by score (ascending), then by location (alphabetical)
    sort(sortedRounds.begin(), sortedRounds.end(), [](const Round& a, const Round& b) {
        if (a.score != b.score) return a.score < b.score;
        return a.location < b.location;
    });

    // Rest of the function remains the same...

    for (const auto& round : sortedRounds) {
        cout << round.location << " : " << round.club << " : "
             << (round.score > 0 ? "+" : "") << round.score << endl;
    }
}


// Print function for "clubs [location]" command
void displayClubs(const map<string, set<string>>& clubs, const string& location) {
    auto it = clubs.find(location);
    if (it == clubs.end()) {
        cout << "Error: The given location not found!" << endl;
        return;
    }

    for (const auto& club : it->second) {
        cout << "--" << club << endl;
    }
}

// Print function for "rounds [club]" command
void displayRounds(const map<string, vector<Round>>& data, const string& club) {
    vector<Round> rounds;
    for (const auto& player : data) {
        for (const auto& round : player.second) {
            if (round.club == club) {
                rounds.push_back(round);
            }
        }
    }

    if (rounds.empty()) {
        cout << "Error: The given club not found!" << endl;
        return;
    }

    sort(rounds.begin(), rounds.end(), [](const Round& a, const Round& b) {
        return a.score < b.score;
    });

    for (const auto& round : rounds) {
            // Add + sign for positive scores
            cout << round.name << " : "
                 << (round.score > 0 ? "+" : "")
                 << round.score << endl;
        }
    }


// Print function for "place" command
void displayPlaces(const map<string, set<string>>& clubs) {
    vector<string> locations;
    for (const auto& entry : clubs) {
        locations.push_back(entry.first);
    }

    sort(locations.begin(), locations.end());

    for (const auto& location : locations) {
        cout << location << endl;
        for (const auto& club : clubs.at(location)) {
            cout << "--" << club << endl;
        }
    }
}

int main() {
    string filename;
    cout << "Input file: ";
    cin >> filename;
    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Clear buffer

    map<string, vector<Round>> data;
    map<string, set<string>> clubs;
    if (!processFile(filename, data, clubs)) {
        return EXIT_FAILURE;
    }

    string input, command, argument;
    while (true) {
        cout << "> ";
        getline(cin, input);  // Read full input
        // Trim input and split into command and argument
            trim(input);
            size_t spacePos = input.find(' ');
            string command = (spacePos == string::npos) ? input : input.substr(0, spacePos);
            string argument = (spacePos == string::npos) ? "" : input.substr(spacePos + 1);

            // Force reset argument to prevent lingering values
            trim(argument); // Ensure no leading/trailing spaces


        // Command Handling
        if (command == "quit" && argument.empty()) {
            break;
        }
        else if (command == "places" ) {
            if(!argument.empty()){
                cout <<"Error: In command: places"<<endl;
            }
            else{
                displayPlaces(clubs);
            }
        }
        else if (command == "played") {
            stringstream ss(argument);
            vector<string> args;
            string temp;

            while (ss >> temp) {  // Split by spaces
                args.push_back(temp);
            }

            if (args.size() != 1) {  // Allow only 1 argument
                cout << "Error: In command: played" << endl;
            } else {
                displayPlayed(data, argument);
            }
        }
        else if (command == "clubs") {
            stringstream ss(argument);
            vector<string> args;
            string temp;

            while (ss >> temp) {  // Split by spaces
                args.push_back(temp);
            }

            if (args.size() != 1) {  // Allow only 1 argument
                cout << "Error: In command: clubs" << endl;
            } else {
                displayClubs(clubs, argument);
            }
        }
        else if (command == "rounds") {
            if (argument.empty()) {
                cout << "Error: In command: rounds" << endl;
            } else {
                vector<string> tokens;
                stringstream ss(argument);
                string token;

                // Split argument into tokens, handling quotes
                while (ss >> token) {
                    if (token.front() == '"') {
                        // Check if the entire token is quoted and closed
                        if (token.back() == '"' && token.size() >= 2) {
                            tokens.push_back(token.substr(1, token.size() - 2));
                            continue;
                        }
                        // Handle multi-part quoted token
                        string combined = token.substr(1); // Remove leading quote
                        bool closed = false;
                        while (ss >> token) {
                            combined += " " + token;
                            if (token.back() == '"') {
                                closed = true;
                                break;
                            }
                        }
                        if (closed) {
                            combined = combined.substr(0, combined.size() - 1); // Remove trailing quote
                        }
                        tokens.push_back(combined);
                    } else {
                        tokens.push_back(token);
                    }
                }

                // Check for exactly one token
                if (tokens.size() != 1) {
                    cout << "Error: In command: rounds" << endl;
                } else {
                    displayRounds(data, tokens[0]);
                }
            }
        }

        else if (command == "compare") {
            vector<string> players;
            string token;
            stringstream ss(argument);
            bool inQuotes = false;
            string current;

            // Parse arguments with quote handling
            while (getline(ss, token, '"')) {
                if (token.empty()) continue;

                if (!inQuotes) {
                    // Split non-quoted parts by spaces
                    stringstream partStream(token);
                    string part;
                    while (partStream >> part) {
                        players.push_back(part);
                    }
                } else {
                    // Quoted content is a single parameter
                    players.push_back(token);
                }
                inQuotes = !inQuotes;
            }

            // Remove any empty strings from accidental double quotes
            players.erase(remove_if(players.begin(), players.end(), [](const string& s) { return s.empty(); }), players.end());

            // Validate exactly 2 parameters
            if (players.size() != 2) {
                cout << "Error: In command: compare" << endl;
            } else {
                // Rebuild argument with proper quoting
                string validArg;
                for (const auto& p : players) {
                    if (p.find(' ') != string::npos) {
                        validArg += "\"" + p + "\" ";
                    } else {
                        validArg += p + " ";
                    }
                }
                validArg = trim(validArg);
                comparePlayers(data, validArg);
            }
        } else {
            cout << "Error: Unknown command: " << command << endl;
        }
    }
    return EXIT_SUCCESS;
}



