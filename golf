#include <iostream>
#include <fstream>
#include <sstream>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

struct Round {
    string name;  // Player's name
    int score;    // Score
};

// Function to trim leading and trailing spaces
string trim(const string& str) {
    size_t first = str.find_first_not_of(" \t\r\n");
    if (first == string::npos) return ""; // Empty or all spaces
    size_t last = str.find_last_not_of(" \t\r\n");
    return str.substr(first, (last - first + 1));
}

bool processFile(const string& filename, map<string, map<string, vector<Round>>>& data) {
    ifstream file(filename);
    if (!file) {
        cerr << "Error: The specified file cannot be opened!" << endl;
        return false;
    }

    string line;
    while (getline(file, line)) {
        if (line.empty()) continue; // Skip empty lines

        stringstream ss(line);
        string location, golfClub, player, scoreStr;
        int score;

        // Parse the line using ';' as a delimiter
        if (!getline(ss, location, ';') || !getline(ss, golfClub, ';') ||
            !getline(ss, player, ';') || !getline(ss, scoreStr, ';')) {
            cerr << "Error: The specified file has an erroneous line!" << endl;
            cerr << "Problematic line: " << line << endl;
            return false;
        }

        // Trim spaces
        location = trim(location);
        golfClub = trim(golfClub);
        player = trim(player);
        scoreStr = trim(scoreStr);

        // Ensure no field is empty
        if (location.empty() || golfClub.empty() || player.empty() || scoreStr.empty()) {
            cerr << "Error: A line has an empty value!" << endl;
            cerr << "Problematic line: " << line << endl;
            return false;
        }

        // Convert score to integer
        try {
            score = stoi(scoreStr);
        } catch (const invalid_argument&) {
            cerr << "Error: Invalid score format in line: " << line << endl;
            return false;
        } catch (const out_of_range&) {
            cerr << "Error: Score out of range in line: " << line << endl;
            return false;
        }

        // Store the data using the Round struct
        data[location][golfClub].push_back({player, score});
    }
    file.close();
    return true;
}

void displayData(const map<string, map<string, vector<Round>>>& data) {
    for (const auto& location : data) {
        cout << location.first << endl;  // Print location

        for (const auto& club : location.second) {
            cout << "  " << club.first << endl;  // Print golf club

            for (const auto& round : club.second) {
                cout << "    " << round.name << " " << round.score << endl;
            }
        }
    }
}

int main() {
    string filename;
    cout << "Input file: ";
    cin >> filename;

    map<string, map<string, vector<Round>>> data;

    if (!processFile(filename, data)) {
        return EXIT_FAILURE;
    }

    displayData(data);
    return EXIT_SUCCESS;
}
